#!/usr/bin/env python3
from config import *
from shell import *
import os


class Bench:
  help = "Run Benchmarking"
  def config(self, parser):
    parser.add_argument('moma', help='Remote machine')
  def exec(self, options):
    moma = options.moma
    assert shell(['rm', '-rf', f'{DEV_ROOT}/running/bin/RunConfig.pm'])
    assert shell(['cp', f'{DEV_ROOT}/running/bin/{RUN_CONFIG}', f'{DEV_ROOT}/running/bin/RunConfig.pm'])
    assert shell(['rsync', '-a', f'../running/', f'{moma}.moma:/home/wenyuz/running'])
    assert shell(['rm', '-rf', f'../results/{moma}/'])
    assert shell(['rm', '-rf', '/home/wenyuz/running/build'], moma=moma)
    assert shell(['mkdir', '-p', '/home/wenyuz/running/build'], moma=moma)
    for jvm in BENCH_JVMS:
        assert shell(['cp', '-r', f'{jvm}', '/home/wenyuz/running/build'], moma=moma)
    assert shell(['rm', '-rf', '~/running/results'], moma=moma)
    assert shell(['mkdir', '-p', '~/running/results'], moma=moma)
    assert shell(['ssh', f'{moma}.moma', f'nohup ~/running/bin/runbms {HEAP_ARGS} > ~/running/results/nohup.out 2>&1 &'])
    return True



class Result:
  help = "Fetch results"
  def config(self, parser):
    parser.add_argument('moma', help='Remote machine')
  def exec(self, options):
    moma = options.moma
    assert shell(['mkdir', '-p', f'{DEV_ROOT}/results/{moma}'])
    assert shell(['rsync', '-a', f'{moma}.moma:/home/wenyuz/running/results/', f'{DEV_ROOT}/results/{moma}'])
    assert shell(['gunzip', '-r', f'{DEV_ROOT}/results/{moma}/log'])
    return True

class Stop:
  help = "Build JikesRVM"
  def config(self, parser):
    parser.add_argument('moma', help='Remote machine')
  def exec(self, options):
    return shell(['pkill', '-f', 'runbms'], moma=options.moma)

MultiEntryMain(
    run = Bench(),
    stop = Stop(),
    fetch = Result()
)