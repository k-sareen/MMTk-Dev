#!/usr/bin/env python3

import shell;


class Bench:
  help = "Build JikesRVM"
  def config(self, parser):
    parser.add_argument('moma', help='Remote machine')
  def action(self, options):
    moma = options.moma
    assert shell(['rsync', '-a', f'../running/', f'{moma}.moma:/home/wenyuz/running'])
    assert shell(['rm', '-rf', f'../results/{moma}/'])
    assert shell(['rm', '-rf', '/home/wenyuz/running/build'], moma=moma)
    assert shell(['mkdir', '-p', '/home/wenyuz/running/build'], moma=moma)
    for jvm in BENCH_JVMS:
        assert shell(['cp', '-r', f'{jvm}', '/home/wenyuz/running/build'], moma=moma)
    assert shell(['rm', '-rf', '~/running/results'], moma=moma)
    assert shell(['cd', 'running', '&&', './bin/runbms 8 1 3 5 7'], moma=moma)
    assert shell(['rsync', '-a', f'{moma}.moma:/home/wenyuz/running/reuslts', f'../results/{moma}'])
    assert shell(['gunzip', '-r', f'../results/{moma}/log'])
    return True

class Stop:
  help = "Build JikesRVM"
  def config(self, parser):
    parser.add_argument('moma', help='Remote machine')
  def action(self, options):
    return shell(['pkill' '-f' 'runbms'], moma=options.moma)

MultiEntryMain(
    run = Bench()
    stop = Stop()
)